version: 2.1

orbs:
  node: circleci/node@5.0.2

commands:
  destroy-environment:
    description: "Destroy back-end and front-end cloudformation stacks given a workflow ID.1"
 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID:0:7} 

  install_nodejs:
    description: "install node js 13"
    steps:
      - run:
          name: "node13"
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
         
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: front-end test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: front-end scan
          command: |
              cd frontend
              npm install
              npm install oauth-sign@^0.9.0
              npm audit --audit-level=critical
              npm audit fix --audit-level=critical --force
          

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: back-end scan
          command: |
              cd backend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --force
              npm audit --audit-level=critical
              npm audit fix --audit-level=critical --force
  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            command: |
              yum -y install tar gzip
        
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople --region us-east-1
        
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              cd .circleci/ansible
              cat inventory
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
              cat inventory

        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory
       # - destroy-environment
        

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["04:81:dd:a2:9c:fc:39:af:36:3d:ac:17:14:14:9f:5a"]
        # attach workspace
        - attach_workspace:
            at: ~/
      
              
        - run:
            name: Install Ansible
            command: |
              apk add --update ansible
        - run:
            name: Run Playbook and configure server
            command: |
              cd .circleci/ansible
              cat inventory
              ansible-playbook -i inventory configure-server.yml
              
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys : [backend-depnd]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations > migrations_dump.txt
           
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat migrations_dump.txt
            if grep -q "has been executed successfully." migrations_dump.txt
            then
               curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure      
  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      
      - restore_cache:
            keys : [backend-depnd]

      - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople --region us-east-1    
      - run:
          name: Get backend url
          command: |
          
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install 
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s  --head ${URL} 
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure      
  deploy-backend:

    docker:
        - image: cimg/base:2022.04
    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["04:81:dd:a2:9c:fc:39:af:36:3d:ac:17:14:14:9f:5a"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys : [backend-depnd]
      - run:
          name: Install node and execute node
          command: |
                cd backend
                curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
                sudo apt install -y nodejs
                sudo npm install -g apm@latest
                sudo npm install -g webpack-dev-server
               
      - run:
          name: Install ansible
          command: |
        
                sudo apt update
                sudo apt install software-properties-common -y
                sudo add-apt-repository --yes --update ppa:ansible/ansible
                sudo apt install  ansible -y
            
      
      - run:
          name: zip backend
          command: |
               
                cd backend
                sudo npm install 
                sudo npm run build
                cd ../
                tar -C backend -czvf artifact.tar.gz backend
                mkdir -p ".circleci/ansible/roles/deploy/files"
                cp artifact.tar.gz  .circleci/ansible/roles/deploy/files
                #cd .circleci/ansible/roles/deploy/files
                #ls
      - run:
          name: Deploy backend 1
          command: | 
                TYPEORM_MIGRATIONS_DIR=./src/migrations
                TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
                TYPEORM_MIGRATIONS=./src/migrations/*.ts        
                cd .circleci/ansible
                echo "Contents  of the inventory file is -------"
                cat inventory
                ansible-playbook -i inventory deploy-backend.yml
           
      # Here's where you will add some code to rollback on failure  
   
  
  
      # Here's where you will add some code to rollback on failure  
 
  smoke-test-backend:
      docker:
        - image: sleavely/node-awscli:14.x
      steps:
        - checkout   
        - run:
            name: Backend smoke test.
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              echo "API_URL = ${APBACKEND_IP}"
              export API_URL="http://${BACKEND_IP}:3030/api/status"
              node --version
              echo "${API_URL}"
              if curl  "${API_URL}"  
              then
                  exit 0
              else
                  exit 1
              fi
       


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
     
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      #- deploy-infrastructure
      #- configure-infrastructure:
       #   requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
     
      #- deploy-frontend:
      #    requires: [run-migrations]
      - deploy-backend
        #  requires: [run-migrations]
      - smoke-test-backend:
          requires: [deploy-backend]