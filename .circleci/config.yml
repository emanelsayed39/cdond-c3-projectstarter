version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID:0:7} 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test

                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: front-end test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: front-end scan
          command: |
              cd frontend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: back-end scan
          command: |
              cd backend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
  deploy-infrastructure:
      docker:
         - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople --region us-east-1
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople --region us-east-1
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment
  configure-infrastructure:
      docker:
        image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints:["04:81:dd:a2:9c:fc:39:af:36:3d:ac:17:14:14:9f:5a"]
        # attach workspace
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
              - project/.circleci/ansible/configure-server.yml
        - run:
            name: Install Ansible
            command: |
              apk add --update ansible
    
        - run:
            name: Run Playbook and configure server
            command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
        - destroy-environment     


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure
      - configure-infrastructure
    